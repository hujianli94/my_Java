.. contents::
   :depth: 3
..

对象
====

::

   //定义一个类
   public class Book {
       String name="西游记";
   //定义一个方法
       public String getName() {
           return name;
       }
           
       public static void main(String[] args) {
           Book b=new Book();
           System.out.println(b.getName());
           System.out.println(new Book().getName());
       }
       
   }


   /*输出
   西游记
   西游记

   */

::


   public class TransferProperty {
   //成员变量
       int i = 47;

   //  类方法
       public void call() {
           System.out.println("调用call方法");
           for (int i = 0; i < 3; i++) {
               System.out.print(i + " ");

           }
           System.out.println();
       }
       
   //  主方法
       public static void main(String[] args) {
   //      创建2个类的实例，t1和t2
           TransferProperty t1=new TransferProperty();
           TransferProperty t2=new TransferProperty();
           
   //      t2中i的属性，修改
           t2.i=66;
   //      输出实例1中的属性和方法
           System.out.println("第一次实例对象调用i的结果："+t1.i);
           t1.call();
   //      输出实例2中的属性和方法
           System.out.println("第二次实例对象调用i的结果："+t2.i);
           t2.call();
       }
   }


   /*

   输出结果
   第一次实例对象调用i的结果：47
   调用call方法
   0 1 2 
   第二次实例对象调用i的结果：66
   调用call方法
   0 1 2 

    */

定义一个有返回值的类
--------------------

::

       * void  表示无返回值
       * private 只有本类可见
       * protected 本类、子类、同一包的类可见
       * pubilc   对任何类可见

::

   public class test12 {
       //定义类变量
       String name;
       String sex;
       int age;
       String addr;


   private void work() {
       System.out.println("我在工作中");
       
   }
   private void eat() {
       System.out.println("我在吃饭"); 
   }

   public String getState(int time) {
       String state = null;
       if (time >=0 && 24>=time) {
           if (time >8 && time<17) {
               state = "我在工作";
               
           }
           else if (time >17 && time <22) {
               state = "我在学习";
           }
           
           else if (time >22 || time <7) {
               state = "我在睡觉";
           } 
       } else {
           state = "错误的时间....";

       }
       return state;
   }

   //主方法
   public static void main(String[] args) {
   //  实例化类
       test12 hujianli = new test12();
       hujianli.name = "胡健力";
       hujianli.age=24;
       hujianli.sex="男";
       hujianli.addr="武汉";
       
       System.out.println(hujianli.name+"晚上23点在干嘛?");
   //  调用get_State方法，把返回值打印出来
       System.out.println(hujianli.getState(23));
       
       System.out.println(hujianli.name+"晚上15点在干嘛?");
       System.out.println(hujianli.getState(15));
       
       
       System.out.println(hujianli.name+"晚上19点在干嘛?");
       System.out.println(hujianli.getState(19));
   }
   }

对象的销毁
----------

对象不再使用时应该销毁。C++语言对象是通过delete语句手动释放，Java语言对象是由垃圾回收器（Garbage
Collection）收集然后释放，程序员不用关心释放的细节。自动内存管理是现代计算机语言发展趋势，例如：C#语言的垃圾回收，Objective-C和Swift语言的ARC（内存自动引用计数管理）。

垃圾回收器（Garbage
Collection）的工作原理是：当一个对象的引用不存在时，认为该对象不再需要，垃圾回收器自动扫描对象的动态内存区，把没有引用的对象作为垃圾收集起来并释放
