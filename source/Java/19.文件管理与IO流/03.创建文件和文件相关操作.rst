.. contents::
   :depth: 3
..

创建文件和文件相关操作
======================

文件属性判断
------------

用\ ``File``\ 对象获取到一个文件时，还可以进一步判断文件的权限和大小：

-  ``boolean canRead()``\ ：是否可读；
-  ``boolean canWrite()``\ ：是否可写；
-  ``boolean canExecute()``\ ：是否可执行；
-  ``long length()``\ ：文件字节大小。

对目录而言，是否可执行表示能否列出它包含的文件和子目录。

创建和删除文件
--------------

当File对象表示一个文件时，可以通过\ ``createNewFile()``\ 创建一个新文件，用\ ``delete()``\ 删除该文件：

创建和删除目录
--------------

和文件操作类似，File对象如果表示一个目录，可以通过以下方法创建和删除目录：

-  ``boolean mkdir()``\ ：创建当前File对象表示的目录；

-  ``boolean mkdirs()``\ ：创建当前File对象表示的目录，并在必要时将不存在的父目录也创建出来；

-  ``boolean delete()``\ ：删除当前File对象表示的目录，当前目录必须为空才能删除成功。

Liu2.java

::

   package com.a51work.cn;

   import java.io.File;
   import java.io.IOException;

   public class Liu2 {
    public static void main(String[] args) {
     File f1 = new File("D:\\GitHub/hujianli.txt");
   //  判断文件或者目录是否存在
     if (!f1.exists()) {
      try {
       System.out.println("文件不存在，创建该文件...");
       f1.createNewFile();   //如果文件不存在，则创建文件
       System.out.println("创建文件成功！");
      } catch (IOException e) {
       // TODO: handle exception
       e.printStackTrace();
      }
     if (f1.isDirectory()) {
      System.out.println("f1对象是目录，目录名称为 "+ f1.getName());
     }else if (f1.isFile()) {
      System.out.println("f1对象是文件，文件名称为" + f1.getName());
      System.out.println("路径为：" + f1.getPath());
     }
      
     }
    }
   }

   /*
   文件不存在，创建该文件...
   创建文件成功！
   f1对象是文件，文件名称为hujianli.txt
   路径为：D:\GitHub\hujianli.txt
   */

遍历文件和目录
--------------

当File对象表示一个目录时，可以使用\ ``list()``\ 和\ ``listFiles()``\ 列出目录下的文件和子目录名。\ ``listFiles()``\ 提供了一系列重载方法，可以过滤不想要的文件和目录：

.. code:: java

   public class Main {
       public static void main(String[] args) throws IOException {
           File f = new File("C:\\Windows");
           File[] fs1 = f.listFiles(); // 列出所有文件和子目录
           printFiles(fs1);
           File[] fs2 = f.listFiles(new FilenameFilter() { // 仅列出.exe文件
               public boolean accept(File dir, String name) {
                   return name.endsWith(".exe"); // 返回true表示接受该文件
               }
           });
           printFiles(fs2);
       }

       static void printFiles(File[] files) {
           System.out.println("==========");
           if (files != null) {
               for (File f : files) {
                   System.out.println(f);
               }
           }
           System.out.println("==========");
       }
   }

创建临时文件
------------

有些时候，程序需要读写一些临时文件，File对象提供了\ ``createTempFile()``\ 来创建一个临时文件，以及\ ``deleteOnExit()``\ 在JVM退出时自动删除该文件。

.. code:: java

   public class Main {
       public static void main(String[] args) throws IOException {
           File f = File.createTempFile("tmp-", ".txt"); // 提供临时文件的前缀和后缀
           f.deleteOnExit(); // JVM退出时自动删除
           System.out.println(f.isFile());
           System.out.println(f.getAbsolutePath());
       }
   }

Path
----

Java标准库还提供了一个\ ``Path``\ 对象，它位于\ ``java.nio.file``\ 包。\ ``Path``\ 对象和\ ``File``\ 对象类似，但操作更加简单：

.. code:: java

   public class Main {
       public static void main(String[] args) throws IOException {
           Path p1 = Paths.get(".", "project", "study"); // 构造一个Path对象
           System.out.println(p1);
           Path p2 = p1.toAbsolutePath(); // 转换为绝对路径
           System.out.println(p2);
           Path p3 = p2.normalize(); // 转换为规范路径
           System.out.println(p3);
           File f = p3.toFile(); // 转换为File对象
           System.out.println(f);
           for (Path p : Paths.get("..").toAbsolutePath()) { // 可以直接遍历Path
               System.out.println("  " + p);
           }
       }
   }
