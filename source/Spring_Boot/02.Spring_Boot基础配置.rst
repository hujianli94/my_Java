.. contents::
   :depth: 3
..

Spring Boot基础配置
===================

不使用spring-boot-starter-parent
--------------------------------

spring-boot-starter-parent主要提供了如下默认配置：

::

    * java版本默认为1.8。
    * 编码格式默认使用UTF-8。
    * 提供Dependency Management进行项目依赖的版本管理。
    * 默认的资源过滤与插件配置。

一般在项目开发或者多模块项目时，需要使用公司自己的parent。这个时候需要进行项目依赖版本的统一管理，就需要使用dependencyManagement来实现，如下：

.. code:: xml

    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>

        <groupId>org.sang</groupId>
        <artifactId>chapter01-2</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <packaging>jar</packaging>

        <name>chapter012</name>
        <description>使用IntelliJ IDEA创建Spring Boot项目</description>

        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.version>
        </properties>

        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>
        <dependencyManagement>
            <dependencies>
                <dependency>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-dependencies</artifactId>
                    <version>2.0.3.RELEASE</version>
                    <type>pom</type>
                    <scope>import</scope>
                </dependency>
            </dependencies>
        </dependencyManagement>
        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.1</version>
                    <configuration>
                        <source>1.8</source>
                        <target>1.8</target>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
            </plugins>
        </build>


    </project>

@Spring BootApplication
-----------------------

@Spring
BootApplication注解是加在项目启动类上的，是一个组合注解，定义如下：

::

    @SpringBootConfiguration
    @EnableAutoConfiguration
    @ComponentScan(
        excludeFilters = {@Filter(
        type = FilterType.CUSTOM,
        classes = {TypeExcludeFilter.class}
    ), @Filter(
        type = FilterType.CUSTOM,
        classes = {AutoConfigurationExcludeFilter.class}
    )}
    )
    public @interface SpringBootApplication {
        @AliasFor(
            annotation = EnableAutoConfiguration.class
        )
        Class<?>[] exclude() default {};
        ......

①@SpringBootConfiguration 的定义如下：

::

    @Configuration
    public @interface SpringBootConfiguration {
    }

原来就是一个@Configuration，所以@SpringBootConfiguration
的功能就是表明是一个配置类，开发者可以在这个类中配置Bean。

虽然项目启动类也包含@Configuration，开发者可以创建一个新的类专门用来配置Bean，这样便于配置的管理。这个类只需要加上@Configuraion注解即可。代码如下：

.. code:: java

    import org.springframework.context.annotation.Configuration;

    @Configuration
    public class MyConfig {
    }

TomcatConfig.java

.. code:: java


    /**
     * Created by sang on 2018/7/4.
     */
    @Configuration
    public class TomcatConfig {
        @Bean
        TomcatServletWebServerFactory tomcatServletWebServerFactory() {
            TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory(){
                @Override
                protected void postProcessContext(Context context) {
                    SecurityConstraint constraint = new SecurityConstraint();
                    constraint.setUserConstraint("CONFIDENTIAL");
                    SecurityCollection collection = new SecurityCollection();
                    collection.addPattern("/*");
                    constraint.addCollection(collection);
                    context.addConstraint(constraint);
                }
            };
            factory.addAdditionalTomcatConnectors(createTomcatConnector());
            return factory;
        }
        private Connector createTomcatConnector() {
            Connector connector = new Connector("org.apache.coyote.http11.Http11NioProtocol");
            connector.setScheme("http");
            connector.setPort(8080);
            connector.setSecure(false);
            connector.setRedirectPort(8081);
            return connector;
        }
    }

②@EnableAutoConfiguration表明开启自动化配置。

③@ComponentScan完成包扫描，也是Spring中的功能，由于@ComponentScan注解默认扫描的类都位于当前类所在包的下面，因此建议实际项目开发中把项目启动类放在根包中。

定制banner
----------

定制banner只需要在resources目录下创建一个banner.txt文件。这个文件中写入txt的艺术字。

关闭banner，可以修改项目启动类的main方法，代码如下：

.. code:: java

    @SpringBootApplication
    public class App {
        public static void main(String[] args) {
    //        SpringApplication.run(App.class, args);          //通过run方法启动项目

            // 关闭banner
            SpringApplicationBuilder builder = new SpringApplicationBuilder(App.class);
            builder.bannerMode(Banner.Mode.OFF).run(args);
        }
    }

Web容器配置
-----------

1.常规配置
~~~~~~~~~~

当开发者添加了spring-boot-starter-web依赖之后，默认使用Tomcat作为Web容器,如果要对Tomcat做进一步配置，可以在application.properties中进行配置。代码如下：

::

    server.port=8081
    server.error.path=/error
    server.servlet.session.timeout=1
    server.servlet.context-path=/chapter02
    server.tomcat.uri-encoding=utf-8
    server.tomcat.max-threads=500
    server.tomcat.basedir=/home/sang/tmp

2.HTTPS配置
~~~~~~~~~~~

国内一些云服务器厂商提供没法的HTTPS证书，一个账号可以申请多个，在jdk中提供了一个java数字证书管理工具，keytool。

在/jdk/bin目录下，通过如下工具可以生成一个数字证书。命令如下

::

    keytool -genkey -alias tomcathttps -keyalg RSA -keysize 2048 -keystore sang,p12 -validity 365

在application.properties中进行配置如下：

::

    server.ssl.key-store=sang.p12
    server.ssl.key-alias=tomcathttps
    server.ssl.key-store-password=123456
    #server.ssl.key-store-type=PKCS12

配置成功，启动项目，在浏览器输入"https://localhost:8081/chapter02/hello"来查看结果。

使用http访问时候，访问失败，这是因为spring
Boot不支持同时在配置中启动HTTP和HTTPS，这个时候可以配置请求重定向，将HTTP请求重定向为HTTPS，配置方式如下：

.. code:: java

    package org.sang.config;

    import org.apache.catalina.Context;
    import org.apache.catalina.connector.Connector;
    import org.apache.tomcat.util.descriptor.web.SecurityCollection;
    import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
    import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    /**
     * Created by sang on 2018/7/4.
     */
    @Configuration
    public class TomcatConfig {
        @Bean
        TomcatServletWebServerFactory tomcatServletWebServerFactory() {
            TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory(){
                @Override
                protected void postProcessContext(Context context) {
                    SecurityConstraint constraint = new SecurityConstraint();
                    constraint.setUserConstraint("CONFIDENTIAL");
                    SecurityCollection collection = new SecurityCollection();
                    collection.addPattern("/*");
                    constraint.addCollection(collection);
                    context.addConstraint(constraint);
                }
            };
            factory.addAdditionalTomcatConnectors(createTomcatConnector());
            return factory;
        }
        private Connector createTomcatConnector() {
            Connector connector = new Connector("org.apache.coyote.http11.Http11NioProtocol");
            connector.setScheme("http");
            connector.setPort(8080);
            connector.setSecure(false);
            connector.setRedirectPort(8081);
            return connector;
        }
    }

这里首先配置一个TomcatServletWebServerFactory，然后添加一个Tomcat中的Connector（监听8080），并将前期转发到8081上去。

浏览器访问"http://127.0.0.1:8080/chapter02/hello"会自动跳转到"https://127.0.0.1:8081/chapter02/hello"界面。

Jetty配置
---------

除了Tomcat外，也可以在Spring Boot中嵌入Jetty，配置方式如下：

目录结构

::

    │  chapter013.iml
    │  pom.xml
    ├─src
    │  ├─main
    │  │  ├─java
    │  │  │  └─org
    │  │  │      └─sang
    │  │  │              Application.java
    │  │  │
    │  │  └─resources
    │  └─test
    │      └─java
    └─target
        │  chapter01-3-0.0.1-SNAPSHOT.jar
        │  chapter01-3-0.0.1-SNAPSHOT.jar.original
        │
        ├─classes
        │  └─org
        │      └─sang
        │              Application.class

pom.xml如下：

.. code:: xml

    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>

        <groupId>org.sang</groupId>
        <artifactId>chapter01-3</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <packaging>jar</packaging>

        <name>chapter01-3</name>
        <description>Demo project for Spring Boot</description>

        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.0.3.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>

        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.version>
        </properties>

        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <exclusions>
                    <exclusion>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-tomcat</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-jetty</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>

        <build>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
            </plugins>
        </build>

    </project>

Application.java

.. code:: java

    package org.sang;

    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.boot.builder.SpringApplicationBuilder;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class Application {
        @GetMapping("/hello")
        public String hello() {
            return "hello jetty";
        }

        public static void main(String[] args) {
            SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);
            builder.application().setAdditionalProfiles("dev");
            builder.run(args);
    //        SpringApplication.run(Chapter013Application.class, args);
        }
    }

​
主要是从spring-boot-starter-web中除去默认的tomcat，然后加入Jetty的依赖即可。此时启动项目，查看启动日志。

如下：

::

    2020-11-10 21:10:01.920  INFO 1380 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
    2020-11-10 21:10:01.940  INFO 1380 --- [           main] o.e.j.s.h.ContextHandler.application     : Initializing Spring FrameworkServlet 'dispatcherServlet'
    2020-11-10 21:10:01.940  INFO 1380 --- [           main] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization started
    2020-11-10 21:10:01.966  INFO 1380 --- [           main] o.s.web.servlet.DispatcherServlet        : FrameworkServlet 'dispatcherServlet': initialization completed in 25 ms
    2020-11-10 21:10:02.011  INFO 1380 --- [           main] o.e.jetty.server.AbstractConnector       : Started ServerConnector@417ad4f3{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}
    2020-11-10 21:10:02.021  INFO 1380 --- [           main] o.s.b.web.embedded.jetty.JettyWebServer  : Jetty started on port(s) 8080 (http/1.1) with context path '/'
    2020-11-10 21:10:02.021  INFO 1380 --- [           main] org.sang.Application                     : Started Application in 5.786 seconds (JVM running for 6.557)

访问web界面\ ``http://127.0.0.1:8080/hello``

Undertow配置
------------

.. code:: xml

    <?xml version="1.0" encoding="UTF-8"?>
    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>

        <groupId>org.sang</groupId>
        <artifactId>chapter01-3</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <packaging>jar</packaging>

        <name>chapter01-3</name>
        <description>Demo project for Spring Boot</description>

        <parent>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-parent</artifactId>
            <version>2.0.3.RELEASE</version>
            <relativePath/> <!-- lookup parent from repository -->
        </parent>

        <properties>
            <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
            <java.version>1.8</java.version>
        </properties>

        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <exclusions>
                    <exclusion>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-starter-tomcat</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-undertow</artifactId>
            </dependency>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <scope>test</scope>
            </dependency>
        </dependencies>

        <build>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                </plugin>
            </plugins>
        </build>
    </project>

启动项目，如下：

::

    2020-11-10 21:22:30.677  INFO 12788 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup
    2020-11-10 21:22:30.839  INFO 12788 --- [           main] o.s.b.w.e.u.UndertowServletWebServer     : Undertow started on port(s) 8080 (http) with context path ''
    2020-11-10 21:22:30.854  INFO 12788 --- [           main] org.sang.Application                     : Started Application in 5.95 seconds (JVM running for 6.671)

访问web界面\ ``http://127.0.0.1:8080/hello``

Properties配置
--------------

Spring
Boot中采用了大量的自动化配置，但对开发者而言，在实际项目中不可避免会有一些需要自己手动配置。承载这些自定义配置的文件就是resources目录下的application.properties文件。（也可以使用YAML来配置）。

如果开发者不想使用application.properties作为配置文件名，也可以自己定义。例如在resources目录下创建一个配置文件app.properties，然后将项目打成jar包,使用如下命令：

.. code:: java

    java -jar chapter02-2-0.0.1-SNAPSHOT.jar --spring.config.name=app

在运行时再指定配置文件的名字，使用spring.config.location可以指定配置文件所在目录（注意需要以/结束），代码如下：

.. code:: java

    java -jar chapter02-2-0.0.1-SNAPSHOT.jar --spring.config.name=app--spring.config.location=classpath:/
